
/**
 *  WARN -  DO NOT MODIFY  - This file is generated by Witchcraftmda. Change CustomerOrder.java instead
 *  Any changes will be overwritten by the next run of the code generator.
 */

package com.td.bbwp.commerce;

import javax.persistence.*;
import org.witchcraft.base.entity.FileAttachment;
import org.witchcraft.base.entity.BaseEntity;
import org.hibernate.annotations.Filter;
import org.hibernate.annotations.Filters;
import org.hibernate.annotations.Formula;
import org.hibernate.annotations.IndexColumn;

import javax.validation.constraints.*;

import java.math.BigDecimal;

import java.util.ArrayList;
import java.util.List;
import java.util.Date;

/** 
 * Entity containing orders that a customer places. 
 **/

@MappedSuperclass
//@Indexed
//@Analyzer(definition = "entityAnalyzer")
public class CustomerOrderBase extends BaseEntity {

	/** 
	 * order related notes like if the order is urgent and any other comments that customer might have put in.  
	 **/

	@NotNull
	@Lob
	@Column(name = "NOTES", unique = false)
	protected String notes

	;

	@ManyToOne(optional = false, fetch = FetchType.LAZY, cascade = {
			CascadeType.MERGE, CascadeType.PERSIST})
	@JoinColumn(name = "CUSTOMER_ID", nullable = false, updatable = true, insertable = true)
	protected Customer customer

	;

	@OneToMany(mappedBy = "customerOrder", fetch = FetchType.LAZY, cascade = CascadeType.ALL, orphanRemoval = true)
	@OrderBy("id DESC")
	protected List<OrderItem> orderItems

	= new ArrayList<OrderItem>()

	;

	@Column(name = "ship_Date", unique = false)
	protected Date shipDate

	;

	@ManyToOne(optional = true, fetch = FetchType.LAZY, cascade = {
			CascadeType.MERGE, CascadeType.PERSIST})
	@JoinColumn(name = "PAYMENT_METHOD_ID", nullable = true, updatable = true, insertable = true)
	protected PaymentMethod paymentMethod

	;

	public void setNotes(String notes) {
		this.notes = notes;
	}

	public String getNotes() {

		return notes;
	}

	public void setCustomer(Customer customer) {
		this.customer = customer;
	}

	public Customer getCustomer() {

		return customer;
	}

	public void setOrderItems(List<OrderItem> orderItems) {
		this.orderItems = orderItems;
	}

	public List<OrderItem> getOrderItems() {

		return orderItems;
	}

	public void addOrderItem(OrderItem orderItem) {

		orderItem.setCustomerOrder((CustomerOrder) this);

		if (this.orderItems == null) {
			this.orderItems = new ArrayList<com.td.bbwp.commerce.OrderItem>();
		}

		this.orderItems.add(orderItem);
	}

	@Transient
	public String createListOrderItemsAsString() {
		return listAsString(orderItems);
	}

	public void setShipDate(Date shipDate) {
		this.shipDate = shipDate;
	}

	public Date getShipDate() {

		return shipDate;
	}

	public void setPaymentMethod(PaymentMethod paymentMethod) {
		this.paymentMethod = paymentMethod;
	}

	public PaymentMethod getPaymentMethod() {

		return paymentMethod;
	}

	@Transient
	//Display name
	public String getDisplayName() {
		try {
			return notes;
		} catch (Exception e) {
			return "Exception - " + e.getMessage();
		}
	}

	@Transient
	public String getNotesAbbreviated() {
		try {
			return org.apache.commons.lang.WordUtils.abbreviate(notes.trim(),
					100, 200, "...");
		} catch (Exception e) {
			return notes != null ? notes : "";
		}
	}

}
